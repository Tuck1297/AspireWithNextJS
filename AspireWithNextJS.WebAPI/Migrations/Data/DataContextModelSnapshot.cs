// <auto-generated />
using System;
using AspireWithNextJS.WebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AspireWithNextJS.WebAPI.Migrations.Data
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspireWithNextJS.WebAPI.Models.ConnectionStrings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("currentTableInteracting")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dbConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dbName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dbType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("dbName")
                        .IsUnique();

                    b.ToTable("ConnectionStrings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ed46eec9-e94c-41e4-b2d9-089b1b171beb"),
                            UserId = new Guid("d63f0ca3-e25d-4583-9354-57f110538f45"),
                            currentTableInteracting = "",
                            dbConnectionString = "host=127.0.0.1; database=SupplyChain; port=5420; user id=postgres; password=123456;",
                            dbName = "SupplyChain",
                            dbType = "Postgres"
                        },
                        new
                        {
                            Id = new Guid("4ffd0817-a0f5-48bb-b723-40cf88b7c673"),
                            UserId = new Guid("d63f0ca3-e25d-4583-9354-57f110538f45"),
                            currentTableInteracting = "",
                            dbConnectionString = "host=127.0.0.1; database=WebsiteInfo; port=5420; user id=postgres; password=123456;",
                            dbName = "WebsiteInfo",
                            dbType = "Postgres"
                        });
                });

            modelBuilder.Entity("AspireWithNextJS.WebAPI.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d63f0ca3-e25d-4583-9354-57f110538f45"),
                            Email = "test1@hackathon.com",
                            FirstName = "TestAdmin",
                            LastName = "Tester",
                            Role = "Admin"
                        },
                        new
                        {
                            UserId = new Guid("d63f0ca3-e25d-4583-9354-57f110538a55"),
                            Email = "test2@hackathon.com",
                            FirstName = "TestUser",
                            LastName = "Tester",
                            Role = "User"
                        });
                });

            modelBuilder.Entity("AspireWithNextJS.WebAPI.Models.UserAccount", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("UserAccount");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d63f0ca3-e25d-4583-9354-57f110538f45"),
                            Email = "test1@hackathon.com",
                            PasswordHash = "$2a$11$pGTOlU2xtRRKU0QgpWRIH.PmW6/arjo6cd2C9tzsUbZDGinjSrxXm",
                            RefreshToken = "IPa8wYK5nA8jjR5UbU4WUNNNkjBCpLHyfCYKzElOEB55vYixePRlPyFN8grrS4NgQkK5s/yZcnxI8zbALRqdoA==",
                            TokenCreated = new DateTime(2023, 12, 5, 6, 18, 37, 141, DateTimeKind.Utc).AddTicks(785),
                            TokenExpires = new DateTime(2023, 12, 5, 6, 48, 37, 141, DateTimeKind.Utc).AddTicks(778)
                        },
                        new
                        {
                            UserId = new Guid("d63f0ca3-e25d-4583-9354-57f110538a55"),
                            Email = "test2hackathon.com",
                            PasswordHash = "$2a$11$E8B8qV/3bS6lcEYZgVMbWuyjFvoterdAKPqf/STj0ujQ1yYFSTQY2",
                            RefreshToken = "5MPNbnyAhUZGr7uBWAFlRSLRWKMMg7+e1zNH5fs/4I31B1YxAwLZiFxKNFlGZctBeKgoUo4fyuqRZw875dRIoA==",
                            TokenCreated = new DateTime(2023, 12, 5, 6, 18, 37, 240, DateTimeKind.Utc).AddTicks(9584),
                            TokenExpires = new DateTime(2023, 12, 5, 6, 48, 37, 240, DateTimeKind.Utc).AddTicks(9578)
                        });
                });

            modelBuilder.Entity("AspireWithNextJS.WebAPI.Models.ConnectionStrings", b =>
                {
                    b.HasOne("AspireWithNextJS.WebAPI.Models.User", "User")
                        .WithMany("ConnectionStrings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AspireWithNextJS.WebAPI.Models.User", b =>
                {
                    b.Navigation("ConnectionStrings");
                });
#pragma warning restore 612, 618
        }
    }
}
